{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.4", "generated_at": "2025-03-14T13:13:31.352680Z", "invocation_id": "45e3a54a-5a40-4c5d-b16a-280aaa088b0c", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-14T13:13:31.175263Z", "completed_at": "2025-03-14T13:13:31.206032Z"}, {"name": "execute", "started_at": "2025-03-14T13:13:31.210059Z", "completed_at": "2025-03-14T13:13:31.210059Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06331324577331543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.data_engineering_project.stg_country", "compiled": true, "compiled_code": "with country as (\n    select distinct\n    customer_id::INTEGER as customer_id,\n    country,\n    region\n    from newdb.deschema.country\n    order by customer_id,country,region\n)\nselect * from country", "relation_name": "NEWDB.DESCHEMA_staging.stg_country"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-14T13:13:31.200308Z", "completed_at": "2025-03-14T13:13:31.243369Z"}, {"name": "execute", "started_at": "2025-03-14T13:13:31.247385Z", "completed_at": "2025-03-14T13:13:31.247385Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.08768606185913086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.data_engineering_project.stg_cust", "compiled": true, "compiled_code": "with customer as (\n    select distinct\n    customer_id::INTEGER as customer_id,\n    customername::VARCHAR as customer_name,\n    company::VARCHAR as company_name,\n    from newdb.deschema.cust\n    where customer_id is not null\n    order by customer_id\n)\nselect * from customer", "relation_name": "NEWDB.DESCHEMA_staging.stg_cust"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-14T13:13:31.236711Z", "completed_at": "2025-03-14T13:13:31.245378Z"}, {"name": "execute", "started_at": "2025-03-14T13:13:31.251405Z", "completed_at": "2025-03-14T13:13:31.251405Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.08969688415527344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.data_engineering_project.stg_prod", "compiled": true, "compiled_code": "with product as (\n    select distinct *\n    from newdb.deschema.prod\n    where product_id is not null\n    order by product_id\n)\nselect * from product", "relation_name": "NEWDB.DESCHEMA_staging.stg_prod"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-14T13:13:31.232695Z", "completed_at": "2025-03-14T13:13:31.243369Z"}, {"name": "execute", "started_at": "2025-03-14T13:13:31.249394Z", "completed_at": "2025-03-14T13:13:31.249394Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.08668088912963867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.data_engineering_project.stg_hotelbook", "compiled": true, "compiled_code": "with hotelbook as (\n    select distinct\n    customer_id,\n    product_id,\n    payment_month,\n    revenue_type,\n    revenue,\n    quantity,\n    companies as company,\n    dimension_1,\n    dimension_2,\n    dimension_3,\n    dimension_4,\n    dimension_5,\n    dimension_6,\n    dimension_7,\n    dimension_8,\n    dimension_9,\n    dimension_10\n    from newdb.deschema.hotelbook\n    where customer_id is not null\n    order by customer_id,payment_month,revenue \n)\nselect * from hotelbook", "relation_name": "NEWDB.DESCHEMA_staging.stg_hotelbook"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-14T13:13:31.267456Z", "completed_at": "2025-03-14T13:13:31.297060Z"}, {"name": "execute", "started_at": "2025-03-14T13:13:31.299057Z", "completed_at": "2025-03-14T13:13:31.299057Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04063534736633301, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.data_engineering_project.cross_sell", "compiled": true, "compiled_code": "WITH cross_sell_analysis AS (\n    SELECT\n        c.customer_id,\n        c.customer_name,\n        COUNT( distinct h.product_id) AS num_products_bought\n    FROM\n        NEWDB.DESCHEMA_staging.stg_hotelbook h JOIN\n        NEWDB.DESCHEMA_staging.stg_cust c on h.customer_id = c.customer_id\n    \n    WHERE h.revenue_type=1\n    \n    GROUP BY\n        c.customer_id,\n        c.customer_name \n        )\n \nSELECT\n    *\nFROM\n   cross_sell_analysis\nORDER BY\n    num_products_bought desc\nLIMIT 10", "relation_name": "NEWDB.DESCHEMA_reporting.cross_sell"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-14T13:13:31.288548Z", "completed_at": "2025-03-14T13:13:31.305516Z"}, {"name": "execute", "started_at": "2025-03-14T13:13:31.305516Z", "completed_at": "2025-03-14T13:13:31.305516Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04309225082397461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.data_engineering_project.customer_rank", "compiled": true, "compiled_code": "WITH customer_revenue AS (\n    SELECT\n        t.customer_id,\n        c.customer_name,\n        SUM(t.revenue) AS total_revenue\n    FROM NEWDB.DESCHEMA_staging.stg_hotelbook t\n    JOIN NEWDB.DESCHEMA_staging.stg_cust c\n        ON t.customer_id = c.customer_id\n    GROUP BY t.customer_id, c.customer_name\n)\nSELECT\n    customer_id,\n    customer_name,\n    total_revenue,\n    DENSE_RANK() OVER (ORDER BY total_revenue DESC) AS revenue_rank\nFROM customer_revenue", "relation_name": "NEWDB.DESCHEMA_reporting.customer_rank"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-14T13:13:31.293057Z", "completed_at": "2025-03-14T13:13:31.305516Z"}, {"name": "execute", "started_at": "2025-03-14T13:13:31.305516Z", "completed_at": "2025-03-14T13:13:31.305516Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04209089279174805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.data_engineering_project.grr", "compiled": true, "compiled_code": "WITH customer_transactions AS (\n    SELECT\n        customer_id,\n        payment_month,\n        SUM(revenue) AS total_revenue\n    FROM NEWDB.DESCHEMA_staging.stg_hotelbook\n    WHERE payment_month <= DATEADD(MONTH, -12, (SELECT MAX(payment_month) FROM NEWDB.DESCHEMA_staging.stg_hotelbook))\n    GROUP BY 1, 2\n),\n \nprevious_revenue AS (\n    SELECT\n        customer_id,\n        payment_month,\n        total_revenue,\n        LAG(total_revenue) OVER (PARTITION BY customer_id ORDER BY payment_month) AS prev_revenue\n    FROM customer_transactions\n),\n \nexpansion_contraction AS (\n    SELECT\n        customer_id,\n        payment_month,\n        prev_revenue,\n        total_revenue,\n        CASE\n            WHEN total_revenue > prev_revenue THEN total_revenue - prev_revenue\n            ELSE 0\n        END AS expansion_revenue,\n        CASE\n            WHEN total_revenue < prev_revenue THEN prev_revenue - total_revenue\n            ELSE 0\n        END AS contraction_revenue\n    FROM previous_revenue\n)\n \nSELECT\n    customer_id,\n    payment_month,\n    total_revenue AS current_revenue,\n    prev_revenue AS previous_revenue,\n    expansion_revenue,\n    contraction_revenue,\n    CASE\n        WHEN prev_revenue = 0 THEN NULL  \n        ELSE (total_revenue - contraction_revenue) / prev_revenue\n    END AS nrr\nFROM expansion_contraction", "relation_name": "NEWDB.DESCHEMA_reporting.grr"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-14T13:13:31.283545Z", "completed_at": "2025-03-14T13:13:31.305516Z"}, {"name": "execute", "started_at": "2025-03-14T13:13:31.305516Z", "completed_at": "2025-03-14T13:13:31.305516Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04509305953979492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.data_engineering_project.customer_churn", "compiled": true, "compiled_code": "WITH individual_month AS (\n    SELECT\n        customer_id,\n        DATE_TRUNC('month', PAYMENT_MONTH) AS transaction_month\n    FROM NEWDB.DESCHEMA_staging.stg_hotelbook\n),\n \nmax_month AS (\n    SELECT MAX(transaction_month) AS latest_month FROM individual_month\n),\n \ncustomer_churn_status AS (\n    SELECT\n        i.customer_id,\n        MAX(i.transaction_month) AS max_month,\n        CASE\n            WHEN MAX(i.transaction_month) <= DATEADD('month', -3, m.latest_month) THEN 'Churned'\n            WHEN MIN(i.transaction_month) >= DATEADD('month', -3, m.latest_month) THEN 'New'\n            ELSE 'Active'\n        END AS churn_status\n    FROM individual_month i\n    CROSS JOIN max_month m\n    GROUP BY i.customer_id, m.latest_month\n)\n \nSELECT\n    churn_status,\n    COUNT(*) AS customer_count\nFROM customer_churn_status\nGROUP BY churn_status", "relation_name": "NEWDB.DESCHEMA_reporting.customer_churn"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-14T13:13:31.304023Z", "completed_at": "2025-03-14T13:13:31.305516Z"}, {"name": "execute", "started_at": "2025-03-14T13:13:31.305516Z", "completed_at": "2025-03-14T13:13:31.305516Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018770694732666016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.data_engineering_project.new_logos", "compiled": true, "compiled_code": "WITH newlogo AS  (\n    SELECT\n       customer_id,\n       DATE_TRUNC('YEAR', MIN(PAYMENT_MONTH)) AS FISCAL_YEAR_START\n    FROM\n        NEWDB.DESCHEMA_staging.stg_hotelbook\n    GROUP BY customer_id\n)\nSELECT\n    COUNT(DISTINCT customer_id) AS customer_count,\n    FISCAL_YEAR_START\nFROM newlogo\nGROUP BY FISCAL_YEAR_START\nORDER BY FISCAL_YEAR_START", "relation_name": "NEWDB.DESCHEMA_reporting.new_logos"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-14T13:13:31.320828Z", "completed_at": "2025-03-14T13:13:31.341696Z"}, {"name": "execute", "started_at": "2025-03-14T13:13:31.341696Z", "completed_at": "2025-03-14T13:13:31.341696Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02086782455444336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.data_engineering_project.nrr", "compiled": true, "compiled_code": "WITH customer_transactions AS (\n    SELECT\n        customer_id,\n        payment_month,\n        SUM(revenue) AS total_revenue\n    FROM NEWDB.DESCHEMA_staging.stg_hotelbook\n    WHERE payment_month <= DATEADD(MONTH, -12, (SELECT MAX(payment_month) FROM NEWDB.DESCHEMA_staging.stg_hotelbook))\n    GROUP BY 1, 2\n),\n \nprevious_revenue AS (\n    SELECT\n        customer_id,\n        payment_month,\n        total_revenue,\n        LAG(total_revenue) OVER (PARTITION BY customer_id ORDER BY payment_month) AS prev_revenue\n    FROM customer_transactions\n),\n \nexpansion_contraction AS (\n    SELECT\n        customer_id,\n        payment_month,\n        prev_revenue,\n        total_revenue,\n        CASE\n            WHEN total_revenue > prev_revenue THEN total_revenue - prev_revenue\n            ELSE 0\n        END AS expansion_revenue,\n        CASE\n            WHEN total_revenue < prev_revenue THEN prev_revenue - total_revenue\n            ELSE 0\n        END AS contraction_revenue\n    FROM previous_revenue\n)\n \nSELECT\n    customer_id,\n    payment_month,\n    total_revenue AS current_revenue,\n    prev_revenue AS previous_revenue,\n    expansion_revenue,\n    contraction_revenue,\n    CASE\n        WHEN prev_revenue = 0 THEN NULL  \n        ELSE (total_revenue + expansion_revenue - contraction_revenue) / prev_revenue\n    END AS nrr\nFROM expansion_contraction", "relation_name": "NEWDB.DESCHEMA_reporting.nrr"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-14T13:13:31.336884Z", "completed_at": "2025-03-14T13:13:31.349296Z"}, {"name": "execute", "started_at": "2025-03-14T13:13:31.352680Z", "completed_at": "2025-03-14T13:13:31.352680Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.031852006912231445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.data_engineering_project.product_rank", "compiled": true, "compiled_code": "WITH product_revenue AS (\n    SELECT\n        t.product_id,\n        SUM(t.revenue) AS total_revenue,\n        p.product_family,\n        p.product_sub_family\n    FROM NEWDB.DESCHEMA_staging.stg_hotelbook t\n    JOIN NEWDB.DESCHEMA_staging.stg_prod p\n        ON t.product_id = p.product_id\n    GROUP BY t.product_id, p.product_family, p.product_sub_family\n)\nSELECT\n    product_id,\n    total_revenue,\n    DENSE_RANK() OVER (ORDER BY total_revenue DESC) AS revenue_rank,\n    product_family,\n    product_sub_family\nFROM product_revenue", "relation_name": "NEWDB.DESCHEMA_reporting.product_rank"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-14T13:13:31.341696Z", "completed_at": "2025-03-14T13:13:31.349296Z"}, {"name": "execute", "started_at": "2025-03-14T13:13:31.352680Z", "completed_at": "2025-03-14T13:13:31.352680Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.020676851272583008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.data_engineering_project.revenueloss", "compiled": true, "compiled_code": "WITH monthly_revenue AS (\n    SELECT\n        product_id,\n        YEAR(payment_month) AS year,\n        MONTH(payment_month) AS month,\n        ROUND(SUM(revenue), 2) AS current_revenue\n    FROM\n        NEWDB.DESCHEMA_staging.stg_hotelbook\n    GROUP BY\n        product_id, year, month\n    ORDER BY\n        product_id, year, month\n),\n \nrevenue_comparison AS (\n    SELECT\n        *,\n        LAG(current_revenue, 1) OVER (PARTITION BY product_id ORDER BY year, month) AS previous_revenue\n    FROM\n        monthly_revenue\n)\nSELECT\n    *,\n    CASE\n        WHEN previous_revenue > current_revenue THEN 'contraction'\n        ELSE 'expansion'\n    END AS revenue_trend,\n    CASE\n        WHEN previous_revenue > current_revenue THEN 'LOSS'\n        ELSE 'PROFIT'\n    END AS profit_or_loss,\n    CASE\n        WHEN previous_revenue > current_revenue THEN previous_revenue - current_revenue\n        ELSE current_revenue - previous_revenue\n    END AS amount\nFROM\n    revenue_comparison", "relation_name": "NEWDB.DESCHEMA_reporting.revenueloss"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-14T13:13:31.332003Z", "completed_at": "2025-03-14T13:13:31.349296Z"}, {"name": "execute", "started_at": "2025-03-14T13:13:31.352680Z", "completed_at": "2025-03-14T13:13:31.352680Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.031852006912231445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.data_engineering_project.product_churn", "compiled": true, "compiled_code": "WITH product_churn AS (\n    SELECT\n        customer_id,\n        payment_month,\n        product_id,\n        MAX(payment_month) OVER(PARTITION BY customer_id) AS max_payment_date_of_customer\n    FROM\n        NEWDB.DESCHEMA_staging.stg_hotelbook\n    WHERE\n        payment_month IS NOT NULL\n    GROUP BY\n        customer_id, payment_month, product_id\n),\nchurned_or_not AS (\n    SELECT\n        customer_id,\n        payment_month,\n        product_id,\n        (CASE\n            WHEN\n                payment_month IS NOT NULL\n                AND\n                DATEDIFF(MONTH, MAX(payment_month),max_payment_date_of_customer) > 12\n            THEN 1\n            ELSE 0\n        END) AS churned\n    FROM\n        product_churn\n    GROUP BY\n        customer_id,\n        payment_month,\n        product_id,\n        max_payment_date_of_customer\n \n),\nhighest_product_churn AS (\n    SELECT\n        PRODUCT_ID,\n        COUNT(churned) AS num_products_churned\n    FROM\n        churned_or_not\n    WHERE\n        churned = 1\n    GROUP BY\n        PRODUCT_ID\n)\n \nSELECT\n    *\nFROM\n    highest_product_churn\nORDER BY\n    num_products_churned\nDESC", "relation_name": "NEWDB.DESCHEMA_reporting.product_churn"}], "elapsed_time": 1.3493711948394775, "args": {"introspect": true, "use_colors": true, "defer": false, "show_resource_report": false, "empty_catalog": false, "indirect_selection": "eager", "vars": {}, "partial_parse_file_diff": true, "populate_cache": true, "printer_width": 80, "send_anonymous_usage_stats": true, "macro_debugging": false, "version_check": true, "profiles_dir": "C:\\Users\\ChandravelMK\\.dbt", "compile": true, "warn_error_options": {"include": [], "exclude": []}, "log_path": "C:\\Users\\ChandravelMK\\Desktop\\dbt_training\\data_engineering_project\\logs", "select": [], "use_colors_file": true, "project_dir": "C:\\Users\\ChandravelMK\\Desktop\\dbt_training\\data_engineering_project", "static_parser": true, "log_level": "info", "cache_selected_only": false, "enable_legacy_logger": false, "static": false, "partial_parse": true, "log_format_file": "debug", "print": true, "strict_mode": false, "invocation_command": "dbt docs generate", "exclude": [], "write_json": true, "log_format": "default", "log_level_file": "debug", "which": "generate", "favor_state": false, "quiet": false, "log_file_max_bytes": 10485760}}